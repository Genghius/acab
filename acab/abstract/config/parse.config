[Parse.Patterns]
# Basic Patterns for Parsing
# Note: Strip " out:
MODULE_SPLIT_REG        = [._]
TAB                     = "    "
TYPE_FMT                = ::{}
COMMENT_RE              = //(?:\\\\\\n|[^\\n])*
WHITE_SPACE             = ' \t\r'
WORD_COMPONENT          = ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_
OPERATOR_SYNTAX         = %%^&*_-+={}[]|<>?~§;⊂⊃∨∧⧼⧽¿£ΔΣΩ∩∪√∀∈∃¬∄⟙⟘⊢∴◇□⚬

[Symbols]
# $$ escapes interpolation of $:
ANON_VALUE     = $$_
BIND           = $$
AT_BIND        = @
END            = end
FUNC           = λ
NEGATION       = ~
QUERY          = ?
TAG            = #
TYPE_BOTTOM    = ⟘
TYPE_SEN       = ::

[Aliases]
# TODO enforce Parsing.Syntax and Parsing.Structure have a 1:1 relationship
RULE         = ρ
QUERY        = γ
TRANSFORM    = τ
ACTION       = α
FACT         = Σ
UUID         = υ

AGENDA       = Agenda
LAYER        = Layer
PIPE         = Pipeline

CTX_COLLAPSE = ctx.collapse

[Parse.Structure]
# These are used in parse results
# ie: could be a single enum
ACTION
CONSTRAINT
BIND
DEFAULT_ACTION
END
QUERY_FALLBACK
FUNC
NAME
NEGATION
OPERATOR
OP_CLASS
QUERY
RULE
SEN
STATEMENT
TAG
TRANSFORM
VALUE
TYPE_INSTANCE

# deprecate: ARG use PARAMS instead
PARAMS
