# Note: Use configparser.ConfigParser(interpolation=configparser.ExtendedInterpolation())

[DEFAULT]
## Misc settings that don't fit elsewhere

# TODO: default data for values/nodes
# (beyond type_instance_s : atom and bind_s : False)
MODULE_SPLIT_REG_S = [._]

[Printing]
UUID_CHOP             = 1
ANON_VALUE_S          = $$_
TYPE_FMT_S            = ::{}
FALLBACK_MODAL_S      = "fallback_modal"
PRINT_SENTINEL_JOIN_S = print_sen_join
SEN_JOIN_S            = sen_join
CONTAINER_JOIN_S      = container_join
PARAM_JOIN_S          = param_join
WRAP_FORMAT_S         = wrap_format
# Note: Strip " out:
TAB_S                 = "    "

DEFAULT_SEMANTIC_SEARCH = UUID NAME ACAB_T PY_T

[Visual.Symbols]
# TODO: a comment by pp name lookup
COMMENT_RE        = //(?:\\\\\\n|[^\\n])*
WHITE_SPACE       = ' \t\r'

# Define base atom chars, operator chars
WORD_COMPONENT_S  = ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_
OPERATOR_SYNTAX_S = %%^&*_-+={}[]|<>?~§;⊂⊃∨∧⧼⧽¿£ΔΣΩ∩∪√∀∈∃¬∄⟙⟘⊢∴◇□⚬

# $$ escapes interpolation of $:
BIND_SYMBOL_S      = $$

AT_BIND_SYMBOL_S             = @
CONTAINER_JOIN_SYMBOL_S      = '\n'
CTX_COLLAPSE_S               = ctx.collapse
END_SYMBOL_S                 = end
FALLBACK_MODAL_SYMBOL_S      = " "
FUNC_SYMBOL_S                = λ
NEGATION_SYMBOL_S            = ~
PARAM_JOIN_SYMBOL_S          = ", "
PRINT_SENTINEL_JOIN_SYMBOL_S = '\n'
QUERY_SYMBOL_S               = ?
SEN_JOIN_SYMBOL_S            = '\n'
TAG_SYMBOL_S                 = #
TYPE_BOTTOM_SYMBOL_S         = ⟘

WRAP_FORMAT_SYMBOL_S = ({})


[Parsing.Statements]
# TODO enforce Parsing.Syntax and Parsing.Structure have a 1:1 relationship
RULE_HEAD_S       = ρ
QUERY_HEAD_S      = γ
TRANSFORM_HEAD_S  = τ
ACTION_HEAD_S     = α
FACT_HEAD_S       = Σ
UUID_HEAD         = υ

AGENDA_HEAD_S     = Agenda
LAYER_HEAD_S      = Layer
PIPE_HEAD_S       = Pipeline

[Parsing.Structure]
# These are used for data access, not printing
# ie: could be a single enum
ACTION_S         = action
ARG_S            = args
AT_BIND_S        = at_bind_
BIND_S           = bind
CONSTRAINT_S     = constraints
DEFAULT_ACTION_S = default_action
END_S            = end
QUERY_FALLBACK_S = fallback
FUNC_S           = function
NAME_S           = name
NEGATION_S       = negated
OPERATOR_S       = operator
OP_CLASS_S       = operator_class
QUERY_S          = query
RULE_S           = rule
SEN_S            = sentence
STATEMENT_S      = statement
TAG_S            = tag
TRANSFORM_S      = transform
VALUE_S          = value
TYPE_INSTANCE_S  = type_instance

[Data.Struct]
ROOT_S       = __root

[Data.Value]
AT_BIND_S        = at_bind_
BIND_S           = bind
CONSTRAINT_S     = constraints
QUERY_FALLBACK_S = fallback
NAME_S           = name
NEGATION_S       = negated
TAG_S            = tag
TYPE_INSTANCE_S  = type_instance

[Typing.Primitives]
# Names to be turned into the base type sentences
ACTION_TYPE_PRIM_S    = ACTION
COMPONENT_TYPE_PRIM_S = COMPONENT
CONTAINER_TYPE_PRIM_S = CONTAINER
OPERATOR_TYPE_PRIM_S  = OPERATOR
QUERY_TYPE_PRIM_S     = QUERY
REGEX_TYPE_PRIM_S     = REGEX
RULE_TYPE_PRIM_S      = RULE
SENTENCE_TYPE_PRIM_S  = SENTENCE
STRING_TYPE_PRIM_S    = STRING
TRANSFORM_TYPE_PRIM_S = TRANSFORM

TYPE_BOTTOM_NAME_S    = ATOM

[WorkingMemory.TrieWM]
NODE_S        = node
LEFT_S        = left
RIGHT_S       = right
SOURCE_S      = source
REPLACE_S     = replace
TARGET_S      = target
ANNOTATION_S  = annotations
RULE_NAME_S   = rule_name

[Modality.Exclusion]
# The Exclusion operator name:
MODAL_NAME_S = EXOP
MODAL_ENUMS_S = DOT EX
# Default exclusion operator for a TrieWM Node.
# Either DOT or EX
DEFAULT_EXOP  = DOT

[Modality.Exclusion.Symbols]
# Symbols to use for exclusion operators
EXOP.DOT = .
EXOP.EX  = !

[Module.Typing]
EXTENDED_LANGUAGE_SYNTAX_S = αβγδεζθικλμνορστυχψωΑΒΓΔΕΖΘΙΚΛΜΝΟΡΣΤΥΧΨΩ

PRIMITIVE_S   = primitive
TYPE_DEF_S    = type_definition
OP_DEF_S      = operator_definition
SUM_DEF_S     = sum_definition
STRUCT_S      = structure
TVAR_S        = type_vars
SYNTAX_BIND_S = syntax_bind

[Module.Typing.Symbols]
SUM_HEAD_S        = Σσ
STRUCTURE_S       = σ
TYPE_CLASS_S      = γ

[Module.Numbers]
# Parser to use for Numbers:
# int, decimal, fraction, all
USE_PARSER = all
ALLOW_NEG = True
#Use to signify a decimal, eg: 34d423 is 34.423
DECIMAL_SYMBOL_S         = d

[Module.Network]
DEFAULT_PORT       = 50000
DEFAULT_BLOCKSIZE  = 1024
DEFAULT_HEADERSIZE = 128
DEFAULT_BACKLOG    = 10
DEFAULT_HOST       = localhost

[Module.Time]
OPT_S          = opt
PATTERN_S      = pattern
TIME_EVENT_S   = event
TIME_PATTERN_S = pattern

TIME_FORMAT_S  = {}/{}

[Module.REPL]
# TODO specify default working memory
ENGINE = acab.engines.trie_engine.TrieEngine
# TODO specify default module loads, split on newline
MODULES = acab.modules.operators.standard_operators
          acab.modules.structures.standard_structures
          acab.modules.analysis.typing
# TODO Specify default prompts
PROMPT = ACAB REPL:
PROMPT_ML = ...

# Need to escape $ because of interpolation
MULTI_LINE_REGEX = ^:[{}]$$
