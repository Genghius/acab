# Note: Use configparser.ConfigParser(interpolation=configparser.ExtendedInterpolation())

[DEFAULT]
# TODO: default data for values/nodes
# (beyond value_type_s : atom and bind_s : False)
MODULE_SPLIT_REG_S = [._]

[REPL]
# TODO specify default working memory
ENGINE = acab.engines.trie_engine.TrieEngine
# TODO specify default module loads, split on newline
MODULES = acab.modules.operators.standard_operators
          acab.modules.structures.standard_structures
          acab.modules.analysis.typing
# TODO Specify default prompts
PROMPT = ACAB REPL:
PROMPT_ML = ...

# Need to escape $ because of interpolation
MULTI_LINE_REGEX = ^:[{}]$$

[Printing]
TYPE_FMT_S = ::{}
FUNC_SYMBOL_S = λ
# Note: Strip " out:
TAB_S      = "    "

FALLBACK_MODAL_S = " "

[Parsing]
# TODO: a comment by pp name lookup
COMMENT_RE        = //(?:\\\\\\n|[^\\n])*
WHITE_SPACE       = ' \t\r'

# Define base atom chars, operator chars
WORD_COMPONENT_S  = ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_
OPERATOR_SYNTAX_S = %%^&*_-+={}[]|<>?~§;⊂⊃∨∧⧼⧽¿£ΔΣΩ∩∪√∀∈∃¬∄⟙⟘⊢∴◇□⚬

# $$ escapes interpolation of $:
VAR_SYMBOL_S      = $$
AT_VAR_SYMBOL_S   = @
TAG_SYMBOL_S      = #
NEGATION_SYMBOL_S = ~
QUERY_SYMBOL_S    = ?
FUNC_SYMBOL_S    = λ

END_S             = end
CTX_COLLAPSE_S    = ctx.collapse

[Parsing.Statements]
RULE_HEAD_S       = ρ
QUERY_HEAD_S      = γ
TRANSFORM_HEAD_S  = τ
ACTION_HEAD_S     = α
FACT_HEAD_S       = Σ
UUID_HEAD         = υ

AGENDA_HEAD_S     = Agenda
LAYER_HEAD_S      = Layer
PIPE_HEAD_S       = Pipeline

[Parsing.Structure]
# TODO distinguish these from *value* data keys
ACTION_S         = action
ARG_S            = args
AT_BIND_S        = at_bind_
BIND_S           = bind
CONSTRAINT_S     = constraints
DEFAULT_ACTION_S = default_action
FALLBACK_S       = fallback
NAME_S           = name
NEGATION_S       = negated
# Modal Operator:
OPERATOR_S       = operator
OP_CLASS_S       = operator_class
QUERY_S          = query
RULE_S           = rule
SEN_S            = sentence
STATEMENT_S      = statement
TAG_S            = tag
TRANSFORM_S      = transform
VALUE_S          = value
VALUE_TYPE_S     = value_type

[Data.Struct]
ROOT_S       = __root

[Data.Value]
# TODO add keys for value data


[WorkingMemory.TrieWM]
NODE_S        = node
MAIN_CLAUSE_S = main_clause
LEFT_S        = left
RIGHT_S       = right
SOURCE_S      = source
REPLACE_S     = replace
TARGET_S      = target
ANNOTATION_S  = annotations
RULE_NAME_S   = rule_name

# The Exclusion operator name:
EXOP          = EXOP
# Default exclusion operator for a TrieWM Node.
# Either DOT or EX
DEFAULT_EXOP  = DOT

[WorkingMemory.TrieWM.Parsing]
# Symbols to use for exclusion operators
EXOP.DOT_S = .
EXOP.EX_S  = !


[Module.Typing]
EXTENDED_LANGUAGE_SYNTAX_S = αβγδεζθικλμνορστυχψωΑΒΓΔΕΖΘΙΚΛΜΝΟΡΣΤΥΧΨΩ
PRIMITIVE_ANNOTATION_S = ::Primitive
TYPE_DEF_S    = type_definition
OP_DEF_S      = operator_definition
SUM_DEF_S     = sum_definition
STRUCT_S      = structure
TVAR_S        = type_vars
SYNTAX_BIND_S = syntax_bind

# Parsing:
# Note: Strip the ' out
DELIM_S       = ', '

SUM_HEAD_S        = Σσ
STRUCTURE_S       = σ
TYPE_CLASS_S      = γ

[Module.Numbers]
#Use to signify a decimal, eg: 34d423 is 34.423
DECIMAL_S         = d

# Parser to use for Numbers:
# ie: int, decimal, fraction, all
USE_PARSER = all
ALLOW_NEG = True

[Module.Network]
DEFAULT_PORT       = 50000
DEFAULT_BLOCKSIZE  = 1024
DEFAULT_HEADERSIZE = 128
DEFAULT_BACKLOG    = 10
DEFAULT_HOST       = localhost

[Module.Time]
OPT_S          = opt
PATTERN_S      = pattern
TIME_EVENT_S   = event
TIME_PATTERN_S = pattern

TIME_FORMAT_S  = {}/{}
